
_OPCODE(op_func0, NULL,                             0,          OP_REPL_READ)
_OPCODE(op_func0, NULL,                             0,          OP_REPL_EVAL)
_OPCODE(op_func0, NULL,                             0,          OP_REPL_PRINT)
_OPCODE(op_func0, NULL,                             0,          OP_REPL_LOOP)
_OPCODE(op_func0, NULL,                             0,          OP_EVAL)
_OPCODE(op_func0, NULL,                             0,          OP_EVAL_OPC)
_OPCODE(op_func0, NULL,                             0,          OP_EVAL_ARGS)
_OPCODE(op_func0, NULL,                             0,          OP_EVAL_LIST)
_OPCODE(op_func0, NULL,                             0,          OP_APPLY)
_OPCODE(op_func0, NULL,                             0,          OP_ERROR)
_OPCODE(op_func0, "define",                         SYNTAX,     OP_DEF0)
_OPCODE(op_func0, NULL,                             0,          OP_DEF1)
_OPCODE(op_func0, "lambda",                         SYNTAX,     OP_LAMBDA)
_OPCODE(op_func0, "do",                             SYNTAX,     OP_DO)
_OPCODE(op_func0, "let",                            SYNTAX,     OP_LET)
_OPCODE(op_func0, "let*",                           SYNTAX,     OP_LETSEQ)
_OPCODE(op_func0, "letrec",                         SYNTAX,     OP_LETREC)
_OPCODE(op_func0, "set!",                           SYNTAX,     OP_SET)
_OPCODE(op_func0, "if",                             SYNTAX,     OP_IF)
_OPCODE(op_func0, "cond",                           SYNTAX,     OP_COND)
_OPCODE(op_func0, "case",                           SYNTAX,     OP_CASE)
_OPCODE(op_func0, "and",                            SYNTAX,     OP_AND)
_OPCODE(op_func0, "or",                             SYNTAX,     OP_OR)
_OPCODE(op_func0, "begin",                          SYNTAX,     OP_BEGIN)
_OPCODE(op_func0, "define-syntax",                  SYNTAX,     OP_DEFINE_SYNTAX)
_OPCODE(op_func0, "let-syntax",                     SYNTAX,     OP_LET_SYNTAX)
_OPCODE(op_func0, "letrec-syntax",                  SYNTAX,     OP_LETREC_SYNTAX)
_OPCODE(op_func0, "syntax-rules",                   SYNTAX,     OP_SYNTAX_RULES)
_OPCODE(op_func0, "quote",                          SYNTAX,     OP_QUOTE)
_OPCODE(op_func0, "unquote",                        SYNTAX,     OP_UNQUOTE)
_OPCODE(op_func0, "quasiquote",                     SYNTAX,     OP_QUASIQUOTE)
_OPCODE(op_func0, "unquote-splicing",               SYNTAX,     OP_UNQUOTE_SPLICING)
_OPCODE(op_func0, "delay",                          SYNTAX,     OP_DELAY)

_OPCODE(op_func0, "map",                            IPROC,      OP_MAP)
_OPCODE(op_func0, "for-each",                       IPROC,      OP_FOREACH)
_OPCODE(op_func0, "eval",                           IPROC,      OP_PEVAL)
_OPCODE(op_func0, "apply",                          IPROC,      OP_PAPPLY)
_OPCODE(op_func0, "force",                          IPROC,      OP_FORCE)
_OPCODE(op_func0, "call-with-current-continuation", IPROC,      OP_CALLCC)
_OPCODE(op_func0, "call/cc",                        IPROC,      OP_CALLCC_ALIAS)
_OPCODE(op_func0, "values",                         IPROC,      OP_VALUES)
_OPCODE(op_func0, "call-with-values",               IPROC,      OP_CALL_WITH_VALUES)
_OPCODE(op_func0, "dynamic-wind",                   IPROC,      OP_DYNAMIC_WIND)
_OPCODE(op_func0, "scheme-report-environment",      IPROC,      OP_SCHEME_REPORT_ENV)
_OPCODE(op_func0, "null-environment",               IPROC,      OP_NULL_ENV)
_OPCODE(op_func0, "interaction-environment ",       IPROC,      OP_INTERACTION_ENV)

_OPCODE(op_func1, "load",                           IPROC,      OP_LOAD)
_OPCODE(op_func1, "transcript-on",                  IPROC,      OP_TRANSCRIPT_ON)
_OPCODE(op_func1, "transcript-off",                 IPROC,      OP_TRANSCRIPT_OFF)
_OPCODE(op_func1, "display",                        IPROC,      OP_DISPLAY)
_OPCODE(op_func1, "newline",                        IPROC,      OP_NEWLINE)
_OPCODE(op_func1, "read",                           IPROC,      OP_READ)
_OPCODE(op_func1, "write",                          IPROC,      OP_WRITE)
_OPCODE(op_func1, "read-char",                      IPROC,      OP_READ_CHAR)
_OPCODE(op_func1, "write-char",                     IPROC,      OP_WRITE_CHAR)
_OPCODE(op_func1, "peek-char",                      IPROC,      OP_PEEK_CHAR)
_OPCODE(op_func1, "char-ready?",                    IPROC,      OP_CHAR_READY_P)
_OPCODE(op_func1, "eof-object?",                    IPROC,      OP_EOF_OBJECT_P)
_OPCODE(op_func1, "open-input-file",                IPROC,      OP_OPEN_INPUT_FILE)
_OPCODE(op_func1, "open-output-file",               IPROC,      OP_OPEN_OUTPUT_FILE)
_OPCODE(op_func1, "close-input-port",               IPROC,      OP_CLOSE_INPUT_PORT)
_OPCODE(op_func1, "close-output-port",              IPROC,      OP_CLOSE_OUTPUT_PORT)
_OPCODE(op_func1, "port?",                          IPROC,       OP_PORT_P)
_OPCODE(op_func1, "input-port?",                    IPROC,      OP_INPUT_PORT_P)
_OPCODE(op_func1, "output-port?",                   IPROC,      OP_OUTPUT_PORT_P)
_OPCODE(op_func1, "current-input-port",             IPROC,      OP_CURR_INPUT_PORT)
_OPCODE(op_func1, "current-output-port",            IPROC,      OP_CURR_OUTPUT_PORT)
_OPCODE(op_func1, "call-with-input-file",           IPROC,      OP_CALL_WITH_INPUT_FILE)
_OPCODE(op_func1, "call-with-output-file",          IPROC,      OP_CALL_WITH_OUTPUT_FILE)
_OPCODE(op_func1, "with-input-from-file",           IPROC,      OP_WITH_INPUT_FROM_FILE)
_OPCODE(op_func1, "with-output-to-file",            IPROC,      OP_WITH_OUTPUT_TO_FILE)

_OPCODE(op_func2, "not",                            IPROC,       OP_NOT)
_OPCODE(op_func2, "null?",                          IPROC,       OP_NULL_P)
_OPCODE(op_func2, "boolean?",                       IPROC,       OP_BOOLEAN_P)
_OPCODE(op_func2, "symbol?",                        IPROC,       OP_SYMBOL_P)
_OPCODE(op_func2, "pair?",                          IPROC,       OP_PAIR_P)
_OPCODE(op_func2, "procedure?",                     IPROC,       OP_PROCEDURE_P)
_OPCODE(op_func2, "eq?",                            IPROC,       OP_EQ_P)
_OPCODE(op_func2, "eqv?",                           IPROC,       OP_EQV_P)
_OPCODE(op_func2, "equal?",                         IPROC,       OP_EQUAL_P)

_OPCODE(op_func2, "char?",                          IPROC,       OP_CHAR_P)
_OPCODE(op_func2, "char=?",                         IPROC,       OP_CHAR_EP)
_OPCODE(op_func2, "char<?",                         IPROC,       OP_CHAR_LP)
_OPCODE(op_func2, "char<=?",                        IPROC,       OP_CHAR_LEP)
_OPCODE(op_func2, "char>?",                         IPROC,       OP_CHAR_GP)
_OPCODE(op_func2, "char>=?",                        IPROC,       OP_CHAR_GEP)
_OPCODE(op_func2, "char-ci=?",                      IPROC,       OP_CHAR_CI_EP)
_OPCODE(op_func2, "char-ci<?",                      IPROC,       OP_CHAR_CI_LP)
_OPCODE(op_func2, "char-ci<=?",                     IPROC,       OP_CHAR_CI_LEP)
_OPCODE(op_func2, "char-ci>?",                      IPROC,       OP_CHAR_CI_GP)
_OPCODE(op_func2, "char-ci>=?",                     IPROC,       OP_CHAR_CI_GEP)
_OPCODE(op_func2, "char-alphabetic?",               IPROC,       OP_CHAR_ALPHA_P)
_OPCODE(op_func2, "char-numeric?",                  IPROC,       OP_CHAR_NUMBER_P)
_OPCODE(op_func2, "char-whitespace?",               IPROC,       OP_CHAR_SPACE_P)
_OPCODE(op_func2, "char-upper-case?",               IPROC,       OP_CHAR_UPPER_P)
_OPCODE(op_func2, "char-lower-case?",               IPROC,       OP_CHAR_LOWER_P)

_OPCODE(op_func2, "string?",                        IPROC,       OP_STRING_P)
_OPCODE(op_func2, "string=?",                       IPROC,       OP_STRING_EP)
_OPCODE(op_func2, "string<?",                       IPROC,       OP_STRING_LP)
_OPCODE(op_func2, "string<=?",                      IPROC,       OP_STRING_LEP)
_OPCODE(op_func2, "string>?",                       IPROC,       OP_STRING_GP)
_OPCODE(op_func2, "string>=?",                      IPROC,       OP_STRING_GEP)
_OPCODE(op_func2, "string-ci=?",                    IPROC,       OP_STRING_CI_EP)
_OPCODE(op_func2, "string-ci<?",                    IPROC,       OP_STRING_CI_LP)
_OPCODE(op_func2, "string-ci<=?",                   IPROC,       OP_STRING_CI_LEP)
_OPCODE(op_func2, "string-ci>?",                    IPROC,       OP_STRING_CI_GP)
_OPCODE(op_func2, "string-ci>=?",                   IPROC,       OP_STRING_CI_GEP)

_OPCODE(op_func2, "vector?",                        IPROC,       OP_VECTOR_P)
_OPCODE(op_func2, "vector",                         IPROC,       OP_VECTOR)
_OPCODE(op_func2, "make-vector",                    IPROC,       OP_MAKE_VECTOR)
_OPCODE(op_func2, "vector-length",                  IPROC,       OP_VECTOR_LENGTH)
_OPCODE(op_func2, "vector-ref",                     IPROC,       OP_VECTOR_REF)
_OPCODE(op_func2, "vector-set!",                    IPROC,       OP_VECTOR_SET)
_OPCODE(op_func2, "vector-fill!",                   IPROC,       OP_VECTOR_FILL)
_OPCODE(op_func2, "vector->list",                   IPROC,       OP_VECTOR_TO_LIST)
_OPCODE(op_func2, "list?",                          IPROC,       OP_LIST_P)
_OPCODE(op_func2, "list",                           IPROC,       OP_LIST)
_OPCODE(op_func2, "list->string",                   IPROC,       OP_LIST_TO_STRING)
_OPCODE(op_func2, "list->vector",                   IPROC,       OP_LIST_TO_VECTOR)
_OPCODE(op_func2, "symbol->string",                 IPROC,       OP_SYMBOL_STRING)
_OPCODE(op_func2, "string",                         IPROC,       OP_STRING)
_OPCODE(op_func2, "make-string",                    IPROC,       OP_MAKE_STRING)
_OPCODE(op_func2, "string-length",                  IPROC,       OP_STRING_LENGTH)
_OPCODE(op_func2, "string-ref",                     IPROC,       OP_STRING_REF)
_OPCODE(op_func2, "string-set!",                    IPROC,       OP_STRING_SET)
_OPCODE(op_func2, "substring",                      IPROC,       OP_SUBSTRING)
_OPCODE(op_func2, "string-append",                  IPROC,       OP_STRING_APPEND)
_OPCODE(op_func2, "string-copy",                    IPROC,       OP_STRING_COPY)
_OPCODE(op_func2, "string-fill!",                   IPROC,       OP_STRING_FILL)
_OPCODE(op_func2, "string->symbol",                 IPROC,       OP_STRING_TO_SYMBOL)
_OPCODE(op_func2, "string->list",                   IPROC,       OP_STRING_TO_LIST)
_OPCODE(op_func2, "string->number",                 IPROC,       OP_STRING_TO_NUMBER)
_OPCODE(op_func2, "char->integer",                  IPROC,       OP_CHAR_TO_INTEGER)
_OPCODE(op_func2, "char-upcase",                    IPROC,       OP_CHAR_UPCASE)
_OPCODE(op_func2, "char-downcase",                  IPROC,       OP_CHAR_DOWNCASE)

_OPCODE(op_func2, "cons",                           IPROC,       OP_CONS)
_OPCODE(op_func2, "car",                            IPROC,       OP_CAR)
_OPCODE(op_func2, "cdr",                            IPROC,       OP_CDR)
_OPCODE(op_func2, "set-car!",                       IPROC,       OP_SET_CAR)
_OPCODE(op_func2, "set-cdr!",                       IPROC,       OP_SET_CDR)
_OPCODE(op_func2, "length",                         IPROC,       OP_LENGTH)
_OPCODE(op_func2, "append",                         IPROC,       OP_APPEND)
_OPCODE(op_func2, "reverse",                        IPROC,       OP_REVERSE)
_OPCODE(op_func2, "list-tail",                      IPROC,       OP_LIST_TAIL)
_OPCODE(op_func2, "list-ref",                       IPROC,       OP_LIST_REF)
_OPCODE(op_func2, "memq",                           IPROC,       OP_MEMQ)
_OPCODE(op_func2, "memv",                           IPROC,       OP_MEMV)
_OPCODE(op_func2, "member",                         IPROC,       OP_MEMBER)
_OPCODE(op_func2, "assq",                           IPROC,       OP_ASSQ)
_OPCODE(op_func2, "assv",                           IPROC,       OP_ASSV)
_OPCODE(op_func2, "assoc",                          IPROC,       OP_ASSOC)

_OPCODE(op_func3, "number?",                        IPROC,       OP_NUMBER_P)
_OPCODE(op_func3, "integer?",                       IPROC,       OP_INTEGER_P)
_OPCODE(op_func3, "rational?",                      IPROC,       OP_RATIONAL_P)
_OPCODE(op_func3, "real?",                          IPROC,       OP_REAL_P)
_OPCODE(op_func3, "complex?",                       IPROC,       OP_COMPLEX_P)
_OPCODE(op_func3, "exact?",                         IPROC,       OP_EXACT_P)
_OPCODE(op_func3, "inexact?",                       IPROC,       OP_INEXACT_P)
_OPCODE(op_func3, "zero?",                          IPROC,       OP_ZERO_P)
_OPCODE(op_func3, "negative?",                      IPROC,       OP_NEGATIVE_P)
_OPCODE(op_func3, "positive?",                      IPROC,       OP_POSITIVE_P)
_OPCODE(op_func3, "odd?",                           IPROC,       OP_ODD_P)
_OPCODE(op_func3, "even?",                          IPROC,       OP_EVEN_P)
_OPCODE(op_func3, "<",                              IPROC,       OP_LP)
_OPCODE(op_func3, "<=",                             IPROC,       OP_LEP)
_OPCODE(op_func3, ">",                              IPROC,       OP_GP)
_OPCODE(op_func3, ">=",                             IPROC,       OP_GEP)
_OPCODE(op_func3, "=",                              IPROC,       OP_EP)
_OPCODE(op_func3, "+",                              IPROC,       OP_ADD)
_OPCODE(op_func3, "-",                              IPROC,       OP_SUB)
_OPCODE(op_func3, "*",                              IPROC,       OP_MULTI)
_OPCODE(op_func3, "/",                              IPROC,       OP_DIV)
_OPCODE(op_func3, "abs",                            IPROC,       OP_ABS)
_OPCODE(op_func3, "quotient",                       IPROC,       OP_QUOTIENT)
_OPCODE(op_func3, "remainder",                      IPROC,       OP_REMAINDER)
_OPCODE(op_func3, "modulo",                         IPROC,       OP_MODULO)
_OPCODE(op_func3, "gcd",                            IPROC,       OP_GCD)
_OPCODE(op_func3, "lcm",                            IPROC,       OP_LCM)
_OPCODE(op_func3, "expt",                           IPROC,       OP_EXPT)
_OPCODE(op_func3, "sqrt",                           IPROC,       OP_SQRT)
_OPCODE(op_func3, "numerator",                      IPROC,       OP_NUMERATOR)
_OPCODE(op_func3, "denominator",                    IPROC,       OP_DENOMINATOR)
_OPCODE(op_func3, "rationalize",                    IPROC,       OP_RATIONALIZE)
_OPCODE(op_func3, "floor",                          IPROC,       OP_FLOOR)
_OPCODE(op_func3, "ceiling",                        IPROC,       OP_CEILING)
_OPCODE(op_func3, "truncate",                       IPROC,       OP_TRUNCATE)
_OPCODE(op_func3, "round",                          IPROC,       OP_ROUND)
_OPCODE(op_func3, "inexact->exact",                 IPROC,       OP_INEXACT_TO_EXACT)
_OPCODE(op_func3, "exact->inexact",                 IPROC,       OP_EXACT_TO_INEXACT)
_OPCODE(op_func3, "max",                            IPROC,       OP_MAX)
_OPCODE(op_func3, "min",                            IPROC,       OP_MIN)
_OPCODE(op_func3, "sin",                            IPROC,       OP_SIN)
_OPCODE(op_func3, "cos",                            IPROC,       OP_COS)
_OPCODE(op_func3, "tan",                            IPROC,       OP_TAN)
_OPCODE(op_func3, "asin",                           IPROC,       OP_ASIN)
_OPCODE(op_func3, "acos",                           IPROC,       OP_ACOS)
_OPCODE(op_func3, "atan",                           IPROC,       OP_ATAN)
_OPCODE(op_func3, "exp",                            IPROC,       OP_EXP)
_OPCODE(op_func3, "log",                            IPROC,       OP_LOG)
_OPCODE(op_func3, "make-rectangular",               IPROC,       OP_MAKE_RECTANGULAR)
_OPCODE(op_func3, "make-polar",                     IPROC,       OP_MAKE_POLAR)
_OPCODE(op_func3, "real-part",                      IPROC,       OP_REAL_PART)
_OPCODE(op_func3, "imag-part",                      IPROC,       OP_IMAG_PART)
_OPCODE(op_func3, "magnitude",                      IPROC,       OP_MAGNITUDE)
_OPCODE(op_func3, "angle",                          IPROC,       OP_ANGLE)
_OPCODE(op_func3, "number->string",                 IPROC,       OP_NUMBER_TO_STRING)
_OPCODE(op_func3, "integer->char",                  IPROC,       OP_STRING_TO_CHAR)

