;; yin-yang pazzle test
;(let* ((yin
;         ((lambda (cc) (display #\@) cc) (call-with-current-continuation (lambda (c) c))))
;       (yang
;         ((lambda (cc) (display #\*) cc) (call-with-current-continuation (lambda (c) c)))))
;    (yin yang))

;; macro test
;(define-syntax aaa (syntax-rules () ((_ a (b (c ...)) ...) '(b ...))))
;(display (aaa 1 (2 (3 4)) (5 (6 7 8))))

;(define-syntax aaa (syntax-rules () ((_ ((a ...) (b ...)) ...) '((a b) ... ...))))
;(display (aaa ((1 2) (3 4)) ((5 6) (7 8))))

;(define-syntax aaa (syntax-rules () ((_ ((a ...) (b ...)) ...) '(a ... ... b ... ...))))
;(display (aaa ((1 2) (3 4)) ((5 6) (7 8))))

(define-syntax when (syntax-rules () 
    ((when test stmt1 stmt2 ...)
     (if test
        (begin stmt1 stmt2 ...)))))
;(define-syntax when (syntax-rules () 
;    ((when test stmt1 stmt2)
;     (if test
;        (begin stmt1 stmt2)))))
;(when #t (display (+ 1 2)) (display #\newline))

(let ((if #t))
    (when if (set! if 'now))
    if)
