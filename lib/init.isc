(define (with-input-from-file file thunk)
  (let ((old-in (current-input-port))
        (tmp-in (open-input-file file)))
    (dynamic-wind
      (lambda () (set-current-input-port! tmp-in))
      (lambda () (let ((res (thunk))) (close-input-port tmp-in) res))
      (lambda () (set-current-input-port! old-in)))))

(define (with-output-to-file file thunk)
  (let ((old-out (current-output-port))
        (tmp-out (open-output-file file)))
    (dynamic-wind
      (lambda () (set-current-output-port! tmp-out))
      (lambda () (let ((res (thunk))) (close-output-port tmp-out) res))
      (lambda () (set-current-output-port! old-out)))))

(define-syntax error
  (syntax-rules ()
    ((_ msg obj ...)
     (display msg))))

(define record-marker (list 'record-marker))
(define real-vector? vector?)
(define (vector? x)
  (and (real-vector? x)
    (or (= 0 (vector-length x))
      (not (eq? (vector-ref x 0)
        record-marker)))))

(define eval
  (let ((real-eval eval))
    (lambda (exp env)
      ((real-eval `(lambda (vector?) ,exp))
        vector?))))

(define (record? x)
  (and (real-vector? x)
    (< 0 (vector-length x))
    (eq? (vector-ref x 0)
      record-marker)))

(define (make-record size)
  (let ((new (make-vector (+ size 1))))
    (vector-set! new 0 record-marker)
    new))

(define (record-ref record index)
  (vector-ref record (+ index 1)))
(define (record-set! record index value)
  (vector-set! record (+ index 1) value))

(define (record-type record)
    (record-ref record 0))

(define :record-type (make-record 3))
(record-set! :record-type 0 :record-type)
(record-set! :record-type 1 ':record-type)
(record-set! :record-type 2 '(name field-tags))

(define (make-record-type name field-tags)
  (let ((new (make-record 3)))
    (record-set! new 0 :record-type)
    (record-set! new 1 name)
    (record-set! new 2 field-tags)
    new))

(define (record-type-name record-type)
  (record-ref record-type 1))

(define (record-type-field-tags record-type)
  (record-ref record-type 2))

(define (field-index type tag)
  (let loop ((i 1) (tags (record-type-field-tags type)))
    (cond ((null? tags)
            (error "record type has no such field" type tag))
          ((eq? tag (car tags))
           i)
          (else
           (loop (+ i 1) (cdr tags))))))

(define (record-constructor type tags)
  (let ((size (length (record-type-field-tags type)))
        (arg-count (length tags))
        (indexes (map (lambda (tag)
                        (field-index type tag))
                    tags)))
  (lambda args
    (if (= (length args)
            arg-count)
        (let ((new (make-record (+ size 1))))
          (record-set! new 0 type)
          (for-each (lambda (arg i)
                      (record-set! new i arg))
                    args
                    indexes)
          new)
        (error "wrong number of arguments to constructor" type args)))))

(define (record-predicate type)
  (lambda (thing)
    (and (record? thing)
         (eq? (record-type thing)
            type))))

(define (record-accessor type tag)
  (let ((index (field-index type tag)))
    (lambda (thing)
      (if (and (record? thing)
                (eq? (record-type thing)
                    type))
          (record-ref thing index)
          (error "accessor applied to bad value" type tag thing)))))

(define (record-modifier type tag)
  (let ((index (field-index type tag)))
    (lambda (thing value)
      (if (and (record? thing)
               (eq? (record-type thing)
                    type))
          (record-set! thing index value)
          (error "modifier applied to bad value" type tag thing)))))

(define-syntax define-record-field
  (syntax-rules ()
    ((define-record-field type field-tag accessor)
      (define accessor (record-accessor type 'field-tag)))
    ((define-record-field type field-tag accessor modifier)
      (begin
        (define accessor (record-accessor type 'field-tag))
        (define modifier (record-modifier type 'field-tag))))))

(define-syntax define-record-type
  (syntax-rules ()
    ((define-record-type type
        (constructor constructor-tag ...)
        predicate
        (field-tag accessor . more) ...)
    (begin
      (define type
        (make-record-type 'type '(field-tag ...)))
      (define constructor
        (record-constructor type '(constructor-tag ...)))
      (define predicate
        (record-predicate type))
      (define-record-field type field-tag accessor . more)
      ...))))
