#!/usr/bin/env ischeme

(define-syntax test
  (syntax-rules ()
    ((test expect expr)
     (begin (display 'expr) (display #\space)
        (if (equal? expect expr)
        (display "pass!\n")
        (display "fail!\n"))))))

(define cadr (lambda (a) (car (cdr a))))

;; macro test
(define-syntax aaa (syntax-rules ()
    ((_ ((a ...) (b ...)) ...) '(a ... ... b ... ...))
    ((_ ((a ...) (b ...)) ...) '((a b) ... ...))
    ((_ a (b (c ...)) ...) '(b ...))
))
(test '(1 2 5 6 3 4 7 8) 
    (aaa ((1 2) (3 4)) ((5 6) (7 8))))
(test '(2 5) (aaa 1 (2 (3 4)) (5 (6 7 8))))
(test '('() 2 '() 4) (aaa (('() 2) ('() 4))))
(test '(() 2 () 4) (aaa ((() 2) (() 4))))
(test '(1 2 3 4) (aaa ((1 2) (3 4))))

(define-syntax aaa (syntax-rules ()
    ((_ a b ...) (begin (let ((t a)) (set! t (string-append t b)) ...)))))
(test "abcdefgh" (aaa "ab" "cd" "ef" "gh"))

(let ((lit1 "ok"))
    (define-syntax aaa (syntax-rules (lit1) ((_ a lit1) (display lit1))))
    (aaa "ok" lit1))

(define-syntax when (syntax-rules () 
    ((when test stmt1 stmt2 ...)
     (if test
        (begin stmt1 stmt2 ...)))))
(test 'now (let ((if #t))
  (when if (set! if 'now)) if))

;; list test
(define l1 (list 1 2))
(define l2 (append l1 (list 3 4)))
(test '(1 2) l1)
(test '(1 2 3 4) l2)
(set-car! l1 2)
(test '(2 2) l1)
(test '(1 2 3 4) l2)

;; eq? eqv? equal? test
(test #t (eqv? 'a 'a))
(test #f (eqv? 'a 'b))
(test #t (eqv? 2 2))
(test #t (eqv? '() '()))
(test #t (eqv? 100000000 100000000))
(test #f (eqv? (cons 1 2) (cons 1 2)))
(test #f (eqv? (lambda () 1) (lambda () 2)))
(test #f (eqv? #f 'nil))
(test #t (let ((p (lambda (x) x)))
    (eqv? p p)))
(test #f (eqv? "" "")) ;undef
(test #f (eqv? '#() '#())) ;undef
(test #f (eqv? (lambda (x) x) ;undef
               (lambda (x) x)))
(test #f (eqv? (lambda (x) x) ;undef
               (lambda (y) y)))
(define gen-counter
  (lambda ()
    (let ((n 0))
      (lambda () (set! n (+ n 1)) n))))
(define gen-counter-proc (gen-counter))
(test 1 (gen-counter-proc))
(test 2 (gen-counter-proc))
(test 3 (gen-counter-proc))
(test #t (let ((g (gen-counter)))
            (eqv? g g)))
(test #f (eqv? (gen-counter) (gen-counter)))

(define gen-loser
  (lambda ()
    (let ((n 0))
      (lambda () (set! n (+ n 1)) 27))))
(test #t (let ((g (gen-loser)))
            (eqv? g g)))
(test #f (eqv? (gen-loser) (gen-loser))) ;undef
(test #f (letrec ((f (lambda () (if (eqv? f g) 'both 'f))) ;undef
                  (g (lambda () (if (eqv? f g) 'both 'g))))
                 (eqv? f g)))
(test #f (letrec ((f (lambda () (if (eqv? f g) 'f 'both)))
                  (g (lambda () (if (eqv? f g) 'g 'both))))
                 (eqv? f g)))
(test #f (eqv? '(a) '(a))) ;undef
(test #f (eqv? "a" "a")) ;undef
(test #f (eqv? '(b) (cdr '(a b)))) ;undef
(test #t (let ((x '(a))) (eqv? x x)))

(test #t (eq? 'a 'a))
(test #f (eq? '(a) '(a))) ;undef
(test #f (eq? (list 'a) (list 'a)))
(test #f (eq? "a" "a")) ;undef
(test #f (eq? "" "")) ;undef
(test #t (eq? '() '()))
(test #f (eq? 2 2)) ;undef
(test #f (eq? #\A #\A)) ;undef
(test #t (eq? car car))
(test #t (let ((n (+ 2 3))) ;undef
            (eq? n n)))
(test #t (let ((x '(a)))
            (eq? x x)))
(test #t (let ((x '#()))
            (eq? x x)))
(test #t (let ((p (lambda (x) x)))
            (eq? p p )))

(test #t (equal? 'a 'a))
(test #t (equal? '(a) '(a)))
(test #t (equal? '(a (b) c) '(a (b) c)))
(test #t (equal? "abc" "abc"))
(test #t (equal? 2 2))
(test #t (equal? (make-vector 5 'a) (make-vector 5 'a)))
(test #f (equal? (lambda (x) x) (lambda (y) y))) ;undef

;; memq memv member
(test '(a b c) (memq 'a '(a b c)))
(test '(b c) (memq 'b '(a b c)))
(test #f (memq 'a '(b c d)))
(test #f (memq (list 'a) '(b (a) c)))
(test '((a) c) (member (list 'a)
                       '(b (a) c)))
(test #f (memq 101 '(100 101 102)))
(test '(101 102) (memv 101 '(100 101 102)))

;; assq assv aaoc
(define e '((a 1) (b 2) (c 3)))
(test '(a 1) (assq 'a e))
(test '(b 2) (assq 'b e))
(test #f (assq 'd e))
(test #f (assq (list 'a) '(((a)) ((b)) ((c)))))
(test '((a)) (assoc (list 'a) '(((a)) ((b)) ((c)))))
(test #f (assq 5 '((2 3) (5 7) (11 13))))
(test '(5 7) (assv 5 '((2 3) (5 7) (11 13))))

;; quaisquote unquote unquote-splicing
(test '(1 3 4) `(1 ,(+ 1 2) 4))
(test '(1 2 3 4) `(1 ,@(list 2 3) 4))
(test '(1 `(2 ,(3 4))) `(1 `(2 ,(3 ,(+ 1 3)))))

;; letrec
(test 3 (letrec ((aaa (lambda () (+ 1 (bbb 1))))
                 (bbb (lambda (n) (+ n 1))))
            (aaa)))

;; let-syntax letrec-syntax
(test 1 (let-syntax ((m (syntax-rules () ((m) 1))))
            (m)))
(test 'now (let-syntax ((when (syntax-rules ()
                                ((when test stmt1 stmt2 ...)
                                 (if test (begin stmt1 stmt2 ...))))))
                (let ((if #t)) (when if (set! if 'now)) if)))
(test 'outer (let ((x 'outer))
                (let-syntax ((m (syntax-rules () ((m) x))))
                    (let ((x 'inner))
                        (m)))))
(test 7 (letrec-syntax ((my-or (syntax-rules ()
                                ((my-or) #f)
                                ((my-or e) e)
                                ((my-or e1 e2 ...)
                                    (let ((temp e1))
                                        (if temp temp (my-or e2 ...)))))))
            (let ((x #f) (y 7) (temp 8) (let odd?) (if even?))
                (my-or x (let temp) (if y) y))))

;; cond
(test 'greater (cond ((> 3 2) 'greater)
                     ((< 3 2) 'less)))
(test 'equal (cond ((> 3 3) 'greater)
                   ((< 3 3) 'less)
                   (else 'equal)))
(test 2 (cond ((assv 'b '((a 1) (b 2))) => cadr)
              (else #f)))

;; case
(test 'composite (case (* 2 3)
                    ((2 3 5 7) 'prime)
                    ((1 4 6 8 9) 'composite)))
(test (display "") (case (car '(c d))
                       ((a) 'a)
                       ((b) 'b)))
(test 'consonant (case (car '(c d))
                    ((a e i o u) 'vowel)
                    ((w y) 'semivowel)
                    (else 'consonant)))

;; do
(test #(0 1 2 3 4) (do ((vec (make-vector 5))
                        (i 0 (+ i 1)))
                    ((= i 5) vec)
                    (vector-set! vec i i)))
(test 25 (let ((x '(1 3 5 7 9)))
            (do ((x x (cdr x))
                 (sum 0 (+ sum (car x))))
                ((null? x) sum))))

;; map
(test '(b e h) (map cadr '((a b) (d e) (g h))))
(test '(5 7 9) (map + '(1 2 3) '(4 5 6)))
(test '(1 2) (let ((count 0))       ;; (1 2) or (2 1)
                (map (lambda (ignore)
                  (set! count (+ count 1))
                  count)
                '(a b))))

;; for-each
(test #(0 1 4 9 16) (let ((v (make-vector 5)))
                        (for-each (lambda (i)
                            (vector-set! v i (* i i)))
                            '(0 1 2 3 4))
                        v))

;; force delay
(begin
    (define count 5)
    (define proms (delay (begin (set! count (+ count 1))
                            (if (> count x)
                                count
                                (force proms)))))
    (let ((x 5))
        (test 6 (force proms)))
    (let ((x 10))
        (test 6 (force proms)))
    )

;; values call-with-values
(test 5 (call-with-values (lambda () (values 4 5))
                          (lambda (a b) b)))
(test -1 (call-with-values * -))

;; dynamic-wind
(test '(connect talk1 disconnect
        connect talk2 disconnect)
    (let ((path '())
          (c #f))
      (let ((add (lambda (s)
                    (set! path (cons s path)))))
        (dynamic-wind
            (lambda () (add 'connect))
            (lambda ()
                (add (call-with-current-continuation
                        (lambda (c0)
                            (set! c c0)
                            'talk1))))
            (lambda () (add 'disconnect)))
        (if (< (length path) 4)
            (c 'talk2)
            (reverse path)))))

;; environment
(test 21 (eval '(* 7 3) (scheme-report-environment 5)))
(test 21 (eval '(* 7 3) (interaction-environment)))
(test 20 (let ((f (eval '(lambda (f x) (f x x))
                        (null-environment 5))))
            (f + 10)))

;; define-record-type
(define-record-type pare
    (make-pare w z x y)
    pare?
    (w get-w)
    (x get-x set-x)
    (y get-y)
    (z get-z set-z))
(test #t (pare? (make-pare 1 2 3 4)))
(test #f (pare? (make-vector 4)))
(test 3 (get-x (make-pare 1 2 3 4)))
(test 2 (let ((tmp (make-pare 1 2 3 4))) (set-x tmp 2) (get-x tmp)))
(test 4 (get-y (make-pare 1 2 3 4)))
(test 1 (get-w (make-pare 1 2 3 4)))

;; numeric
(test 1 (modulo 13 4))
(test 1 (remainder 13 4))
(test 3 (modulo -13 4))
(test -1 (remainder -13 4))
(test -3 (modulo 13 -4))
(test 1 (remainder 13 -4))
(test -1 (modulo -13 -4))
(test -1 (remainder -13 -4))
(test -1.0 (remainder -13 -4.0))
(test 4 (gcd 32 -36))
(test 4 (lcm 32 -36 16))
(test 0 (gcd))
(test 288 (lcm 32 -36))
(test 1152 (lcm 32 -36 16))
(test 288.0 (lcm 32.0 -36))
(test 1 (lcm))

(test 15/2 (max 3 7 4.2 6.5 15/2))
(test 2 (min 3.9 4 2 10.12))
