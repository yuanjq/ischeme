;; yin-yang pazzle test
;(let* ((yin
;         ((lambda (cc) (display #\@) cc) (call-with-current-continuation (lambda (c) c))))
;       (yang
;         ((lambda (cc) (display #\*) cc) (call-with-current-continuation (lambda (c) c)))))
;    (yin yang))

;; macro test
(define-syntax aaa (syntax-rules ()
    ((_ ((a ...) (b ...)) ...) '(a ... ... b ... ...))
    ((_ ((a ...) (b ...)) ...) '((a b) ... ...))
    ((_ a (b (c ...)) ...) '(b ...))
))
(display (aaa ((1 2) (3 4)) ((5 6) (7 8)))) (newline)
(display (aaa 1 (2 (3 4)) (5 (6 7 8)))) (newline)
(display (aaa (('() 2) ('() 4)))) (newline)
(display (aaa ((() 2) (() 4)))) (newline)
(display (aaa ((1 2) (3 4)))) (newline)

(let ((lit1 "ok"))
    (define-syntax aaa (syntax-rules (lit1) ((_ a lit1) (display lit1))))
    (aaa "ok" lit1))

(define-syntax when (syntax-rules () 
    ((when test stmt1 stmt2 ...)
     (if test
        (begin stmt1 stmt2 ...)))))
(when #t (display (+ 1 2)) (display #\newline))
(when #t 1 2)
(let ((if #t))
    (when if (set! if 'now))
    if)

;; list test
(define l1 (list 1 2))
(display l1) (newline)
(define l2 (append l1 (list 3 4)))
(display l1) (newline)
(display l2) (newline)
(set-car! l1 2)
(display l1) (newline)
(display l2) (newline)
